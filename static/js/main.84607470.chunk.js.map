{"version":3,"sources":["incordec/Incordec.js","App.js","serviceWorker.js","index.js"],"names":["Incordec","state","operand1","inc","e","setState","dec","erase","classes","this","props","md","xs","className","root","AppBar","position","style","backgroundColor","color","Toolbar","Typography","title","padding","paddingBottom","Grid","container","item","Card","margin","boxShadow","CardContent","paddingTop","textbox","id","type","readOnly","value","label","button","each","onClick","spacing","each1","Component","withStyles","theme","flexGrow","display","width","height","fontSize","textAlign","borderWidth","borderColor","App","history","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84607470.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  button: {\r\n    display: 'block',\r\n    backgroundColor: 'white'\r\n  },\r\n  each1: {\r\n    width: '55%',\r\n    height: '50px',\r\n    fontSize: '25px',\r\n    backgroundColor: '#00ffff',\r\n    color: ' #1a0000'\r\n  },\r\n  each: {\r\n    width: '50%',\r\n    height: '50px',\r\n    fontSize: '30px',\r\n    backgroundColor: '#00ffff',\r\n    color: ' #1a0000'\r\n  }, \r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'center',\r\n    fontSize:\"25px\"\r\n  },\r\n  textbox: {\r\n    height: '60px',\r\n    backgroundColor: 'white',\r\n    width: '100%',\r\n    fontSize:'25px',\r\n    textAlign : 'center',\r\n    borderWidth:'3px',\r\n    borderColor:'red'\r\n  }\r\n});\r\n\r\n\r\nclass Incordec extends Component {\r\n  state = {\r\n    operand1:0,\r\n  }\r\n  inc=(e)=>{\r\n    this.setState({operand1:this.state.operand1+1})\r\n  }\r\n  dec=(e)=>{\r\n    this.setState({operand1:this.state.operand1-1})\r\n  }\r\n\r\nerase=()=>{\r\n    this.setState({\r\n        operand1:0\r\n    })\r\n}\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div md={12} xs={12}>\r\n        <div className={classes.root}>\r\n          <AppBar position=\"fixed\" style={{backgroundColor:\"#DC143C\",color:\"white\"}}>\r\n            <Toolbar>\r\n              <Typography className={classes.title}>\r\n                COUNTER APPLICATION\r\n                            </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div style={{ padding: \"20px\",paddingBottom:\"0px\" }}>\r\n          <Grid container>\r\n            <Grid item md={4} />\r\n            <Grid item md={4}>\r\n              <Card style={{\r\n                margin: \"auto\",\r\n                boxShadow: \"0px 0px 5px 5px rgba(0,0,0,0.3)\",\r\n                \"&:hover\": {\r\n                  boxShadow: \"0 16px 30px 12.125px rgba(0,0,0,0.3)\"\r\n                }\r\n              }}>\r\n                <CardContent>\r\n                <div style={{paddingTop:\"10px\"}}></div>\r\n                  <input\r\n                    className={classes.textbox} id=\"display\" type=\"text\" readOnly value={this.state.operand1} label=\"Firstname\" />\r\n                <div style={{paddingTop:\"10px\"}}></div>\r\n                  <div className={classes.button}>\r\n                    <button className={classes.each} value=\"+\" id=\"+\" onClick={(e)=>this.inc(e)}>+</button>\r\n                    <button className={classes.each} value=\"-\" id=\"-;\" onClick={()=>this.dec()}>-</button>\r\n                   </div>\r\n                   <div>\r\n                   <div style={{paddingTop:\"3px\"}}></div>\r\n                    <Grid container spacing={3} >\r\n                <Grid item md={4} xs={4}/>\r\n                      <Grid item md={7} xs={7}>           \r\n                    <button className={classes.each1} value=\"del\" id=\"del\" onClick={(e)=>this.erase(e)}>Reset</button>\r\n                    </Grid>\r\n                  <Grid item md={1} />\r\n                  </Grid>\r\n                 </div>\r\n                  \r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item md={4} />\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Incordec);\r\n","import React,{Component} from 'react';\nimport Incordec from './incordec/Incordec';\nimport {HashRouter as Router,Switch,Route} from 'react-router-dom';\nimport { createBrowserHistory as history} from 'history';\n\nclass App extends Component {\n  render(){\n  return (\n    <Router history={history }>\n    <div>\n    <Switch>\n<Route path=\"/\" exact component={Incordec}/>\n</Switch>\n</div>\n</Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}